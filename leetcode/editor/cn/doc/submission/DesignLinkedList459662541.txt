    class ListNode {
        int val;
        ListNode next, prev;

        ListNode() {
        };

        ListNode(int val) {
            this.val = val;
        }
    }

    class MyLinkedList {

        int size;
        ListNode head, tail;

        public MyLinkedList() {
            this.size = 0;
            this.head = new ListNode(0);
            this.tail = new ListNode(0);

            head.next = tail;
            tail.prev = head;
        }

        public int get(int index) {
            // 判断index是否有效
            if (index < 0 || index >= size) {
                return -1;
            }
            ListNode cur = this.head;
            // 判断是哪一边遍历时间更短
            if (index >= size / 2) {
                //tail开始
                cur = tail;
                for (int i = 0; i < size - index; i++) {
                    cur = cur.prev;
                }
            }else {
                for (int i =0; i<= index; i++){
                    cur = cur.next;
                }
            }
            return cur.val;
        }

        public void addAtHead(int val) {
            // 等价于在第0个元素前添加
            addAtIndex(0,val);
        }

        public void addAtTail(int val) {
            // 等价于在最后一个元素null前添加
            addAtIndex(size,val);
        }

        public void addAtIndex(int index, int val) {
            // index大于链表长度
            if (index > size){
                return;
            }
            //index小于0
            if (index<0){
                index = 0;
            }
            size++;
            //找到前驱
            ListNode pre = this.head;
            for (int i=0; i<index; i++){
                pre = pre.next;
            }
            // 新建节点
            ListNode newNode = new ListNode(val);
            newNode.next = pre.next;
            pre.next.prev = newNode;
            newNode.prev = pre;
            pre.next = newNode;
        }

        public void deleteAtIndex(int index) {
            // 判断索引是否有效
            if (index < 0 || index >= size){
                return;
            }
            //删除操作
            size --;
            ListNode pre = this.head;
            for (int i = 0; i<index; i++){
                pre = pre.next;
            }
            pre.next.next.prev = pre;
            pre.next = pre.next.next;
        }
    }

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */

//runtime:10 ms
//memory:43.1 MB
