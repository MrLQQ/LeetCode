class MyQueue {
    Deque<Integer> deque = new LinkedList<>();

    // 队列弹出元素的时候，判断要弹出的元素是是否与等于队列出口的值，如果相同删除，否则不删除
    void poll(int val) {
        if (!deque.isEmpty() && val == deque.peek()) {
            deque.poll();
        }
    }

    // 队列添加元素，判断要添加的元素是否大于入口元素，大于移除入口元素，放目标元素进入队列
    void add(int val) {
        while (!deque.isEmpty() && val > deque.getLast()) {
            deque.removeLast();
        }
        deque.add(val);
    }

    int peek() {
        return deque.peek();
    }
}

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 1) {
            return nums;
        }

        MyQueue myQueue = new MyQueue();
        int len = nums.length - k + 1;
        int[] res = new int[len];
        int num = 0;
        // 先将前k个元素放入队列
        for (int i = 0; i < k; i++) {
            myQueue.add(nums[i]);
        }
        res[num++] = myQueue.peek();

        // 滑动窗口开始向后移动
        for (int i = k; i < nums.length; i++) {
            myQueue.poll(nums[i - k]);
            myQueue.add(nums[i]);
            res[num++] = myQueue.peek();
        }
        return res;
    }
}

//runtime:38 ms
//memory:57.7 MB
