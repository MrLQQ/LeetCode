
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> res = new ArrayList<>();
        Deque<TreeNode> que = new LinkedList<>();
        if (root == null) {
            return res;
        }
        que.offer(root);

        // BFS
        while (!que.isEmpty()) {
            int size = que.size();
            double sum = 0.0;

            for (int i = 0; i < size; i++) {
                TreeNode node = que.poll();
                sum += node.val;
                if (node.left != null) que.offer(node.left);
                if (node.right != null) que.offer(node.right);
            }
            res.add(sum / size);
        }
        return res;
    }
}

//runtime:2 ms
//memory:43.3 MB
